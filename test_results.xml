<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="2" time="3.493" timestamp="2024-05-25T17:35:13.538295" hostname="MOTA-HOME-MM"><testcase classname="tests.test_auth" name="test_register_user" time="0.038"><failure message="sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: users.password&#10;[SQL: SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password &#10;FROM users &#10;WHERE users.username = ?&#10; LIMIT ? OFFSET ?]&#10;[parameters: ('testuser1716672913', 1, 0)]&#10;(Background on this error at: https://sqlalche.me/e/20/e3q8)">self = &lt;sqlalchemy.engine.base.Connection object at 0x000002CEB88E5070&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x000002CEB544FB60&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x000002CEB84EAD20&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x000002CEB860FA40&gt;
parameters = [('testuser1716672913', 1, 0)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\base.py:1967: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x000002CEB544FB60&gt;
cursor = &lt;sqlite3.Cursor object at 0x000002CEB8902140&gt;
statement = 'SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('testuser1716672913', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x000002CEB84EAD20&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such column: users.password

c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\default.py:924: OperationalError

The above exception was the direct cause of the following exception:

client = &lt;starlette.testclient.TestClient object at 0x000002CEB860FE00&gt;

    def test_register_user(client):
        username = f"testuser{int(time.time())}"  # Append a timestamp to the username
&gt;       response = client.post("/users/register", json={"username": username, "password": "testpass"})

tests\test_auth.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\testclient.py:633: in post
    return super().post(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\httpx\_client.py:1145: in post
    return self.request(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\testclient.py:516: in request
    return super().request(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\httpx\_client.py:827: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\httpx\_client.py:914: in send
    response = self._send_handling_auth(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\httpx\_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\httpx\_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\httpx\_client.py:1015: in _send_single_request
    response = transport.handle_request(request)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\testclient.py:398: in handle_request
    raise exc
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\testclient.py:395: in handle_request
    portal.call(self.app, scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\anyio\from_thread.py:288: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
c:\programdata\anaconda3\envs\platform_dev\Lib\concurrent\futures\_base.py:456: in result
    return self.__get_result()
c:\programdata\anaconda3\envs\platform_dev\Lib\concurrent\futures\_base.py:401: in __get_result
    raise self._exception
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\anyio\from_thread.py:217: in _call_func
    retval = await retval_or_awaitable
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\fastapi\applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\applications.py:123: in __call__
    await self.middleware_stack(scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\middleware\errors.py:186: in __call__
    raise exc
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\middleware\errors.py:164: in __call__
    await self.app(scope, receive, _send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\middleware\base.py:189: in __call__
    with collapse_excgroups():
c:\programdata\anaconda3\envs\platform_dev\Lib\contextlib.py:158: in __exit__
    self.gen.throw(value)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\_utils.py:93: in collapse_excgroups
    raise exc
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\middleware\base.py:191: in __call__
    response = await self.dispatch_func(request, call_next)
main.py:28: in verify_jwt_middleware
    response = await call_next(request)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\middleware\base.py:165: in call_next
    raise app_exc
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\middleware\base.py:151: in coro
    await self.app(scope, receive_or_disconnect, send_no_error)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\middleware\exceptions.py:65: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\_exception_handler.py:64: in wrapped_app
    raise exc
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\routing.py:756: in __call__
    await self.middleware_stack(scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\routing.py:776: in app
    await route.handle(scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\routing.py:297: in handle
    await self.app(scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\routing.py:77: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\_exception_handler.py:64: in wrapped_app
    raise exc
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\routing.py:72: in app
    response = await func(request)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\fastapi\routing.py:278: in app
    raw_response = await run_endpoint_function(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\fastapi\routing.py:193: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\concurrency.py:42: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\anyio\to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\anyio\_backends\_asyncio.py:2144: in run_sync_in_worker_thread
    return await future
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\anyio\_backends\_asyncio.py:851: in run
    result = context.run(func, *args)
user_management\routes.py:23: in register
    db_user = crud.get_user_by_username(db, username=user.username)
user_management\crud.py:9: in get_user_by_username
    return db.query(User).filter(User.username == username).first()
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\orm\query.py:2728: in first
    return self.limit(1)._iter().first()  # type: ignore
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\orm\query.py:2827: in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\orm\session.py:2351: in execute
    return self._execute_internal(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\orm\session.py:2236: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\orm\context.py:293: in orm_execute_statement
    result = conn.execute(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\base.py:1418: in execute
    return meth(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\sql\elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\base.py:1846: in _execute_context
    return self._exec_single_context(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\base.py:2353: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\base.py:1967: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x000002CEB544FB60&gt;
cursor = &lt;sqlite3.Cursor object at 0x000002CEB8902140&gt;
statement = 'SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('testuser1716672913', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x000002CEB84EAD20&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: users.password
E       [SQL: SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
E       FROM users 
E       WHERE users.username = ?
E        LIMIT ? OFFSET ?]
E       [parameters: ('testuser1716672913', 1, 0)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\default.py:924: OperationalError</failure></testcase><testcase classname="tests.test_auth" name="test_login_user" time="0.018"><failure message="sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: users.password&#10;[SQL: SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password &#10;FROM users &#10;WHERE users.username = ?&#10; LIMIT ? OFFSET ?]&#10;[parameters: ('testuser', 1, 0)]&#10;(Background on this error at: https://sqlalche.me/e/20/e3q8)">self = &lt;sqlalchemy.engine.base.Connection object at 0x000002CEB898B500&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x000002CEB544FB60&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x000002CEB898B770&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x000002CEB860FA40&gt;
parameters = [('testuser', 1, 0)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\base.py:1967: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x000002CEB544FB60&gt;
cursor = &lt;sqlite3.Cursor object at 0x000002CEBBCADC40&gt;
statement = 'SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('testuser', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x000002CEB898B770&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such column: users.password

c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\default.py:924: OperationalError

The above exception was the direct cause of the following exception:

client = &lt;starlette.testclient.TestClient object at 0x000002CEB88E5970&gt;

    def test_login_user(client):
&gt;       response = client.post("/users/login", json={"username": "testuser", "password": "testpass"})

tests\test_auth.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\testclient.py:633: in post
    return super().post(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\httpx\_client.py:1145: in post
    return self.request(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\testclient.py:516: in request
    return super().request(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\httpx\_client.py:827: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\httpx\_client.py:914: in send
    response = self._send_handling_auth(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\httpx\_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\httpx\_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\httpx\_client.py:1015: in _send_single_request
    response = transport.handle_request(request)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\testclient.py:398: in handle_request
    raise exc
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\testclient.py:395: in handle_request
    portal.call(self.app, scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\anyio\from_thread.py:288: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
c:\programdata\anaconda3\envs\platform_dev\Lib\concurrent\futures\_base.py:456: in result
    return self.__get_result()
c:\programdata\anaconda3\envs\platform_dev\Lib\concurrent\futures\_base.py:401: in __get_result
    raise self._exception
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\anyio\from_thread.py:217: in _call_func
    retval = await retval_or_awaitable
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\fastapi\applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\applications.py:123: in __call__
    await self.middleware_stack(scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\middleware\errors.py:186: in __call__
    raise exc
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\middleware\errors.py:164: in __call__
    await self.app(scope, receive, _send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\middleware\base.py:189: in __call__
    with collapse_excgroups():
c:\programdata\anaconda3\envs\platform_dev\Lib\contextlib.py:158: in __exit__
    self.gen.throw(value)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\_utils.py:93: in collapse_excgroups
    raise exc
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\middleware\base.py:191: in __call__
    response = await self.dispatch_func(request, call_next)
main.py:28: in verify_jwt_middleware
    response = await call_next(request)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\middleware\base.py:165: in call_next
    raise app_exc
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\middleware\base.py:151: in coro
    await self.app(scope, receive_or_disconnect, send_no_error)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\middleware\exceptions.py:65: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\_exception_handler.py:64: in wrapped_app
    raise exc
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\routing.py:756: in __call__
    await self.middleware_stack(scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\routing.py:776: in app
    await route.handle(scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\routing.py:297: in handle
    await self.app(scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\routing.py:77: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\_exception_handler.py:64: in wrapped_app
    raise exc
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\routing.py:72: in app
    response = await func(request)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\fastapi\routing.py:278: in app
    raw_response = await run_endpoint_function(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\fastapi\routing.py:193: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\starlette\concurrency.py:42: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\anyio\to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\anyio\_backends\_asyncio.py:2144: in run_sync_in_worker_thread
    return await future
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\anyio\_backends\_asyncio.py:851: in run
    result = context.run(func, *args)
user_management\routes.py:30: in login
    db_user = crud.get_user_by_username(db, username=user.username)
user_management\crud.py:9: in get_user_by_username
    return db.query(User).filter(User.username == username).first()
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\orm\query.py:2728: in first
    return self.limit(1)._iter().first()  # type: ignore
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\orm\query.py:2827: in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\orm\session.py:2351: in execute
    return self._execute_internal(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\orm\session.py:2236: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\orm\context.py:293: in orm_execute_statement
    result = conn.execute(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\base.py:1418: in execute
    return meth(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\sql\elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\base.py:1846: in _execute_context
    return self._exec_single_context(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\base.py:2353: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\base.py:1967: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x000002CEB544FB60&gt;
cursor = &lt;sqlite3.Cursor object at 0x000002CEBBCADC40&gt;
statement = 'SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('testuser', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x000002CEB898B770&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: users.password
E       [SQL: SELECT users.id AS users_id, users.username AS users_username, users.password AS users_password 
E       FROM users 
E       WHERE users.username = ?
E        LIMIT ? OFFSET ?]
E       [parameters: ('testuser', 1, 0)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

c:\programdata\anaconda3\envs\platform_dev\Lib\site-packages\sqlalchemy\engine\default.py:924: OperationalError</failure></testcase></testsuite></testsuites>